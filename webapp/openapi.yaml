openapi: "3.1.0"
info:
  title: Shopify Scraper Product API
  version: 1.0.0
  description: API for managing and searching products scraped from Shopify stores.
servers:
  - url: /api
paths:
  /products:
    get:
      summary: List products
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: per_page
          schema: { type: integer, default: 500 }
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  total:
                    type: integer
                  page:
                    type: integer
                  per_page:
                    type: integer
              examples:
                example:
                  value:
                    products:
                      - $ref: '#/components/examples/ProductExample/value'
                    total: 1
                    page: 1
                    per_page: 500
    post:
      summary: Create a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
            examples:
              example:
                $ref: '#/components/examples/ProductExample'
      responses:
        '201':
          description: Product created
        '409':
          description: Product already exists
  /products/{id}:
    get:
      summary: Get a product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
              examples:
                example:
                  $ref: '#/components/examples/ProductExample'
        '404':
          description: Product not found
    put:
      summary: Update a product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
            examples:
              example:
                $ref: '#/components/examples/ProductExample'
      responses:
        '200':
          description: Product updated
        '404':
          description: Product not found
    delete:
      summary: Delete a product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Product deleted
        '404':
          description: Product not found
  /products/search:
    get:
      summary: Search products
      parameters:
        - in: query
          name: q
          required: true
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: per_page
          schema: { type: integer, default: 500 }
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  total:
                    type: integer
                  page:
                    type: integer
                  per_page:
                    type: integer
              examples:
                example:
                  value:
                    products:
                      - $ref: '#/components/examples/ProductExample/value'
                    total: 1
                    page: 1
                    per_page: 500
components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
        handle:
          type: string
        title:
          type: string
        available:
          type: boolean
        published_at:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        vendor:
          type: string
        url:
          type: string
        price:
          type: string
        original_json:
          type: string
        input_url:
          type: string
        alcohol_type:
          type: string
        became_available_at:
          type: string
        became_unavailable_at:
          type: string
        last_seen:
          type: string
        image_url:
          type: string
        date_added:
          type: string
  examples:
    ProductExample:
      value:
        id: 123456
        handle: "rare-bourbon-whiskey"
        title: "Rare Bourbon Whiskey"
        available: true
        published_at: "2025-04-16T08:20:19-07:00"
        created_at: "2024-11-09T08:57:26-08:00"
        updated_at: "2025-07-07T06:52:47-07:00"
        vendor: "Southern"
        url: "https://www.blackwellswines.com/products/rare-bourbon-whiskey"
        price: "75.00"
        original_json: '{"id": 123456, "title": "Rare Bourbon Whiskey", "images": [{"src": "https://cdn.shopify.com/s/files/1/0363/8621/files/rare_bourbon.jpg"}]}'
        input_url: "https://www.blackwellswines.com/"
        alcohol_type: "Bourbon"
        became_available_at: "2025-04-16T08:20:19-07:00"
        became_unavailable_at: null
        last_seen: "2025-07-07T13:53:12"
        image_url: "https://cdn.shopify.com/s/files/1/0363/8621/files/rare_bourbon.jpg"
        date_added: "2024-11-09T08:57:26-08:00"
